// Code generated by mockery v2.51.0. DO NOT EDIT.

package mock

import (
	context "context"

	clock "github.com/benbjohnson/clock"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockClock is an autogenerated mock type for the Clock type
type MockClock struct {
	mock.Mock
}

type MockClock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClock) EXPECT() *MockClock_Expecter {
	return &MockClock_Expecter{mock: &_m.Mock}
}

// After provides a mock function with given fields: d
func (_m *MockClock) After(d time.Duration) <-chan time.Time {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for After")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func(time.Duration) <-chan time.Time); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// MockClock_After_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'After'
type MockClock_After_Call struct {
	*mock.Call
}

// After is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockClock_Expecter) After(d interface{}) *MockClock_After_Call {
	return &MockClock_After_Call{Call: _e.mock.On("After", d)}
}

func (_c *MockClock_After_Call) Run(run func(d time.Duration)) *MockClock_After_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClock_After_Call) Return(_a0 <-chan time.Time) *MockClock_After_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_After_Call) RunAndReturn(run func(time.Duration) <-chan time.Time) *MockClock_After_Call {
	_c.Call.Return(run)
	return _c
}

// AfterFunc provides a mock function with given fields: d, f
func (_m *MockClock) AfterFunc(d time.Duration, f func()) *clock.Timer {
	ret := _m.Called(d, f)

	if len(ret) == 0 {
		panic("no return value specified for AfterFunc")
	}

	var r0 *clock.Timer
	if rf, ok := ret.Get(0).(func(time.Duration, func()) *clock.Timer); ok {
		r0 = rf(d, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clock.Timer)
		}
	}

	return r0
}

// MockClock_AfterFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AfterFunc'
type MockClock_AfterFunc_Call struct {
	*mock.Call
}

// AfterFunc is a helper method to define mock.On call
//   - d time.Duration
//   - f func()
func (_e *MockClock_Expecter) AfterFunc(d interface{}, f interface{}) *MockClock_AfterFunc_Call {
	return &MockClock_AfterFunc_Call{Call: _e.mock.On("AfterFunc", d, f)}
}

func (_c *MockClock_AfterFunc_Call) Run(run func(d time.Duration, f func())) *MockClock_AfterFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(func()))
	})
	return _c
}

func (_c *MockClock_AfterFunc_Call) Return(_a0 *clock.Timer) *MockClock_AfterFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_AfterFunc_Call) RunAndReturn(run func(time.Duration, func()) *clock.Timer) *MockClock_AfterFunc_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function with no fields
func (_m *MockClock) Now() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockClock_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockClock_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockClock_Expecter) Now() *MockClock_Now_Call {
	return &MockClock_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockClock_Now_Call) Run(run func()) *MockClock_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClock_Now_Call) Return(_a0 time.Time) *MockClock_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_Now_Call) RunAndReturn(run func() time.Time) *MockClock_Now_Call {
	_c.Call.Return(run)
	return _c
}

// Since provides a mock function with given fields: t
func (_m *MockClock) Since(t time.Time) time.Duration {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Since")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Time) time.Duration); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockClock_Since_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Since'
type MockClock_Since_Call struct {
	*mock.Call
}

// Since is a helper method to define mock.On call
//   - t time.Time
func (_e *MockClock_Expecter) Since(t interface{}) *MockClock_Since_Call {
	return &MockClock_Since_Call{Call: _e.mock.On("Since", t)}
}

func (_c *MockClock_Since_Call) Run(run func(t time.Time)) *MockClock_Since_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockClock_Since_Call) Return(_a0 time.Duration) *MockClock_Since_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_Since_Call) RunAndReturn(run func(time.Time) time.Duration) *MockClock_Since_Call {
	_c.Call.Return(run)
	return _c
}

// Sleep provides a mock function with given fields: d
func (_m *MockClock) Sleep(d time.Duration) {
	_m.Called(d)
}

// MockClock_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockClock_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockClock_Expecter) Sleep(d interface{}) *MockClock_Sleep_Call {
	return &MockClock_Sleep_Call{Call: _e.mock.On("Sleep", d)}
}

func (_c *MockClock_Sleep_Call) Run(run func(d time.Duration)) *MockClock_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClock_Sleep_Call) Return() *MockClock_Sleep_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClock_Sleep_Call) RunAndReturn(run func(time.Duration)) *MockClock_Sleep_Call {
	_c.Run(run)
	return _c
}

// Tick provides a mock function with given fields: d
func (_m *MockClock) Tick(d time.Duration) <-chan time.Time {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Tick")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func(time.Duration) <-chan time.Time); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// MockClock_Tick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tick'
type MockClock_Tick_Call struct {
	*mock.Call
}

// Tick is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockClock_Expecter) Tick(d interface{}) *MockClock_Tick_Call {
	return &MockClock_Tick_Call{Call: _e.mock.On("Tick", d)}
}

func (_c *MockClock_Tick_Call) Run(run func(d time.Duration)) *MockClock_Tick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClock_Tick_Call) Return(_a0 <-chan time.Time) *MockClock_Tick_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_Tick_Call) RunAndReturn(run func(time.Duration) <-chan time.Time) *MockClock_Tick_Call {
	_c.Call.Return(run)
	return _c
}

// Ticker provides a mock function with given fields: d
func (_m *MockClock) Ticker(d time.Duration) *clock.Ticker {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Ticker")
	}

	var r0 *clock.Ticker
	if rf, ok := ret.Get(0).(func(time.Duration) *clock.Ticker); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clock.Ticker)
		}
	}

	return r0
}

// MockClock_Ticker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ticker'
type MockClock_Ticker_Call struct {
	*mock.Call
}

// Ticker is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockClock_Expecter) Ticker(d interface{}) *MockClock_Ticker_Call {
	return &MockClock_Ticker_Call{Call: _e.mock.On("Ticker", d)}
}

func (_c *MockClock_Ticker_Call) Run(run func(d time.Duration)) *MockClock_Ticker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClock_Ticker_Call) Return(_a0 *clock.Ticker) *MockClock_Ticker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_Ticker_Call) RunAndReturn(run func(time.Duration) *clock.Ticker) *MockClock_Ticker_Call {
	_c.Call.Return(run)
	return _c
}

// Timer provides a mock function with given fields: d
func (_m *MockClock) Timer(d time.Duration) *clock.Timer {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Timer")
	}

	var r0 *clock.Timer
	if rf, ok := ret.Get(0).(func(time.Duration) *clock.Timer); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clock.Timer)
		}
	}

	return r0
}

// MockClock_Timer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timer'
type MockClock_Timer_Call struct {
	*mock.Call
}

// Timer is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockClock_Expecter) Timer(d interface{}) *MockClock_Timer_Call {
	return &MockClock_Timer_Call{Call: _e.mock.On("Timer", d)}
}

func (_c *MockClock_Timer_Call) Run(run func(d time.Duration)) *MockClock_Timer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClock_Timer_Call) Return(_a0 *clock.Timer) *MockClock_Timer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_Timer_Call) RunAndReturn(run func(time.Duration) *clock.Timer) *MockClock_Timer_Call {
	_c.Call.Return(run)
	return _c
}

// Until provides a mock function with given fields: t
func (_m *MockClock) Until(t time.Time) time.Duration {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Until")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Time) time.Duration); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockClock_Until_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Until'
type MockClock_Until_Call struct {
	*mock.Call
}

// Until is a helper method to define mock.On call
//   - t time.Time
func (_e *MockClock_Expecter) Until(t interface{}) *MockClock_Until_Call {
	return &MockClock_Until_Call{Call: _e.mock.On("Until", t)}
}

func (_c *MockClock_Until_Call) Run(run func(t time.Time)) *MockClock_Until_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockClock_Until_Call) Return(_a0 time.Duration) *MockClock_Until_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClock_Until_Call) RunAndReturn(run func(time.Time) time.Duration) *MockClock_Until_Call {
	_c.Call.Return(run)
	return _c
}

// WithDeadline provides a mock function with given fields: parent, d
func (_m *MockClock) WithDeadline(parent context.Context, d time.Time) (context.Context, context.CancelFunc) {
	ret := _m.Called(parent, d)

	if len(ret) == 0 {
		panic("no return value specified for WithDeadline")
	}

	var r0 context.Context
	var r1 context.CancelFunc
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (context.Context, context.CancelFunc)); ok {
		return rf(parent, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) context.Context); ok {
		r0 = rf(parent, d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) context.CancelFunc); ok {
		r1 = rf(parent, d)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}

	return r0, r1
}

// MockClock_WithDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDeadline'
type MockClock_WithDeadline_Call struct {
	*mock.Call
}

// WithDeadline is a helper method to define mock.On call
//   - parent context.Context
//   - d time.Time
func (_e *MockClock_Expecter) WithDeadline(parent interface{}, d interface{}) *MockClock_WithDeadline_Call {
	return &MockClock_WithDeadline_Call{Call: _e.mock.On("WithDeadline", parent, d)}
}

func (_c *MockClock_WithDeadline_Call) Run(run func(parent context.Context, d time.Time)) *MockClock_WithDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *MockClock_WithDeadline_Call) Return(_a0 context.Context, _a1 context.CancelFunc) *MockClock_WithDeadline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClock_WithDeadline_Call) RunAndReturn(run func(context.Context, time.Time) (context.Context, context.CancelFunc)) *MockClock_WithDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// WithTimeout provides a mock function with given fields: parent, t
func (_m *MockClock) WithTimeout(parent context.Context, t time.Duration) (context.Context, context.CancelFunc) {
	ret := _m.Called(parent, t)

	if len(ret) == 0 {
		panic("no return value specified for WithTimeout")
	}

	var r0 context.Context
	var r1 context.CancelFunc
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) (context.Context, context.CancelFunc)); ok {
		return rf(parent, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) context.Context); ok {
		r0 = rf(parent, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) context.CancelFunc); ok {
		r1 = rf(parent, t)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}

	return r0, r1
}

// MockClock_WithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTimeout'
type MockClock_WithTimeout_Call struct {
	*mock.Call
}

// WithTimeout is a helper method to define mock.On call
//   - parent context.Context
//   - t time.Duration
func (_e *MockClock_Expecter) WithTimeout(parent interface{}, t interface{}) *MockClock_WithTimeout_Call {
	return &MockClock_WithTimeout_Call{Call: _e.mock.On("WithTimeout", parent, t)}
}

func (_c *MockClock_WithTimeout_Call) Run(run func(parent context.Context, t time.Duration)) *MockClock_WithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockClock_WithTimeout_Call) Return(_a0 context.Context, _a1 context.CancelFunc) *MockClock_WithTimeout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClock_WithTimeout_Call) RunAndReturn(run func(context.Context, time.Duration) (context.Context, context.CancelFunc)) *MockClock_WithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClock creates a new instance of MockClock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClock {
	mock := &MockClock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
